// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/relab/hotstuff (interfaces: ViewSynchronizer)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	hotstuff "github.com/relab/hotstuff"
	reflect "reflect"
)

// MockViewSynchronizer is a mock of ViewSynchronizer interface
type MockViewSynchronizer struct {
	ctrl     *gomock.Controller
	recorder *MockViewSynchronizerMockRecorder
}

// MockViewSynchronizerMockRecorder is the mock recorder for MockViewSynchronizer
type MockViewSynchronizerMockRecorder struct {
	mock *MockViewSynchronizer
}

// NewMockViewSynchronizer creates a new mock instance
func NewMockViewSynchronizer(ctrl *gomock.Controller) *MockViewSynchronizer {
	mock := &MockViewSynchronizer{ctrl: ctrl}
	mock.recorder = &MockViewSynchronizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockViewSynchronizer) EXPECT() *MockViewSynchronizerMockRecorder {
	return m.recorder
}

// GetLeader mocks base method
func (m *MockViewSynchronizer) GetLeader(arg0 hotstuff.View) hotstuff.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeader", arg0)
	ret0, _ := ret[0].(hotstuff.ID)
	return ret0
}

// GetLeader indicates an expected call of GetLeader
func (mr *MockViewSynchronizerMockRecorder) GetLeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeader", reflect.TypeOf((*MockViewSynchronizer)(nil).GetLeader), arg0)
}

// Init mocks base method
func (m *MockViewSynchronizer) Init(arg0 hotstuff.Consensus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", arg0)
}

// Init indicates an expected call of Init
func (mr *MockViewSynchronizerMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockViewSynchronizer)(nil).Init), arg0)
}

// OnFinishQC mocks base method
func (m *MockViewSynchronizer) OnFinishQC() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnFinishQC")
}

// OnFinishQC indicates an expected call of OnFinishQC
func (mr *MockViewSynchronizerMockRecorder) OnFinishQC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnFinishQC", reflect.TypeOf((*MockViewSynchronizer)(nil).OnFinishQC))
}

// OnNewView mocks base method
func (m *MockViewSynchronizer) OnNewView() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnNewView")
}

// OnNewView indicates an expected call of OnNewView
func (mr *MockViewSynchronizerMockRecorder) OnNewView() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNewView", reflect.TypeOf((*MockViewSynchronizer)(nil).OnNewView))
}

// OnPropose mocks base method
func (m *MockViewSynchronizer) OnPropose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnPropose")
}

// OnPropose indicates an expected call of OnPropose
func (mr *MockViewSynchronizerMockRecorder) OnPropose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPropose", reflect.TypeOf((*MockViewSynchronizer)(nil).OnPropose))
}

// Start mocks base method
func (m *MockViewSynchronizer) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockViewSynchronizerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockViewSynchronizer)(nil).Start))
}

// Stop mocks base method
func (m *MockViewSynchronizer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockViewSynchronizerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockViewSynchronizer)(nil).Stop))
}
